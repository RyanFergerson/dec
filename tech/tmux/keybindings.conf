##########################
# Clear default bindings #
##########################
unbind C-b
unbind "\$"    # rename-session
unbind ,       # rename-window
unbind %       # split-window -h
unbind '"'     # split-window
unbind '}'     # swap-pane -D
unbind '{'     # swap-pane -U
unbind [       # paste-buffer
unbind ]
unbind "'"     # select-window
unbind n       # next-window
unbind p       # previous-window
unbind l       # last-window
unbind M-n     # next window with alert
unbind M-p     # next window with alert
unbind o       # focus thru panes
unbind &       # kill-window
unbind "#"     # list-buffer
unbind =       # choose-buffer
unbind z       # zoom-pane
unbind M-Up    # resize 5 rows up
unbind M-Down  # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left  # resize 5 rows left

# https://stackoverflow.com/a/46205850
unbind -T copy-mode-vi MouseDragEnd1Pane

# Use control space as default prefix
# https://github.com/tmux/tmux/wiki/Modifier-Keys#modifier-keys
set -g prefix C-Space
bind C-Space send-prefix

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nvim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"tmux.conf sourced\"'"

# Reload configuration
bind C-r source-file ~/.config/tmux/tmux.conf \; display 'tmux.conf sourced'

# new window with name
#https://stackoverflow.com/a/25477737
bind-key n command-prompt -p "window name:" "new-window; rename-window '%%'"

bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

##############
# Navigation #
##############
# split current window horizontally
bind - split-window -v

# split current window vertically
bind _ split-window -h

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
#bind > swap-pane -t -1    # swap current pane with the next one
#bind < swap-pane -t +1    # swap current pane with the previous one

# window navigation
bind < move-window -t 0

# maximize current pane
#bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
#bind m run "cut -c3- ~/.config/tmux/tmux.conf | sh -s _toggle_mouse"

# toggle tmux status line
bind-key T set-option status

# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'

# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'

#############
# Copy mode #
#############
bind [ copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

###########
# Buffers #
###########
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

############
# Sessions #
############
# Create session with name
bind-key C-c command-prompt -p "session name:" "new-session; rename-session '%%'"

# sort session list
bind s choose-tree -s -O name

################
# USER-DEFINED #
################
path="~/.config/tmux"
scripts="~/.local/bin"

bind-key -r C-m run-shell -b "$path/plugins/tmux-fzf/scripts/session.sh attach"
bind-key -r C-u run-shell "tmux neww $scripts/cht-sh.zsh"
bind-key -r C-f run-shell "tmux neww $scripts/run-script.zsh"
bind-key -r C-j run-shell "tmux neww $scripts/run-script.zsh"
bind-key -r C-n run-shell "tmux neww $scripts/new-script.zsh"
